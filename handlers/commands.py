from aiogram import Router, types, F
from aiogram.filters import Command
from models.database import Database
from services.gigachat import GigaChatService
from utils.formatters import format_laws
from utils.nlp_utils import extract_keywords  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
import logging

router = Router()
giga = GigaChatService()

@router.message(Command("start", "help"))
async def cmd_start(message: types.Message):
    welcome_text = (
        "üë®‚öñÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫!\n\n"
        "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ:\n"
        "- –¢—Ä—É–¥–æ–≤–æ–º—É –∫–æ–¥–µ–∫—Å—É\n"
        "- –ì—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–º—É –∫–æ–¥–µ–∫—Å—É\n"
        "- –ù–∞–ª–æ–≥–æ–≤–æ–º—É –∫–æ–¥–µ–∫—Å—É\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "'–ö–∞–∫–∏–µ –ø—Ä–∞–≤–∞ —É —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –ø—Ä–∏ —É–≤–æ–ª—å–Ω–µ–Ω–∏–∏?'"
    )
    await message.answer(welcome_text)

@router.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = (
        "üìö –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
        "1. –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏\n"
        "2. –£–∫–∞–∂–∏—Ç–µ, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–æ–º–µ—Ä —Å—Ç–∞—Ç—å–∏ –∏–ª–∏ –∫–æ–¥–µ–∫—Å–∞\n"
        "3. –ë–æ—Ç –Ω–∞–π–¥–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:\n"
        "- '–°—Ç–∞—Ç—å—è 81 –¢–ö –†–§'\n"
        "- '–ü—Ä–∞–≤–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ —Ç–æ–≤–∞—Ä–∞'\n"
        "- '–°—Ä–æ–∫–∏ —É–ø–ª–∞—Ç—ã –ù–î–§–õ'"
    )
    await message.answer(help_text)

@router.message()
async def handle_all_messages(message: types.Message):
    try:
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db = Database()
        keywords = extract_keywords(message.text)
        laws = db.search_laws(keywords)
        
        if laws:
            await message.answer(format_laws(laws))
        else:
            # –ï—Å–ª–∏ –≤ –ë–î –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º GigaChat
            try:
                ai_response = await giga.ask(message.text)
                await message.answer(ai_response)
            except Exception as ai_error:
                logging.error(f"GigaChat error: {ai_error}")
                await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏  –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                
    except Exception as e:
        logging.error(f"Error processing message: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
